# Generated by Django 4.2 on 2025-04-19 23:43

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        help_text="Phone number in international format",
                        max_length=15,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator("^\\+?1?\\d{9,15}$")
                        ],
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("FARMER", "Farmer"),
                            ("BUYER", "Buyer"),
                            ("AGENT", "Field Agent"),
                            ("ADMIN", "Admin"),
                            ("LOGISTICS", "Logistics Partner"),
                        ],
                        help_text="User's role in the system",
                        max_length=10,
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, help_text="Has the user verified their account?"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Is the account active?"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False, help_text="Can the user access admin site?"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("sw", "Swahili"),
                            ("fr", "French"),
                        ],
                        default="en",
                        help_text="User's preferred language",
                        max_length=10,
                    ),
                ),
                (
                    "notification_preferences",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="User's notification settings",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
        ),
        migrations.CreateModel(
            name="Bid",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Bid amount per unit",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.01)],
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Requested quantity",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.01)],
                    ),
                ),
                (
                    "delivery_address",
                    models.TextField(help_text="Delivery location details"),
                ),
                (
                    "delivery_date",
                    models.DateField(help_text="Requested delivery date"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("ACCEPTED", "Accepted"),
                            ("REJECTED", "Rejected"),
                            ("WITHDRAWN", "Withdrawn"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="PENDING",
                        help_text="Current bid status",
                        max_length=10,
                    ),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True, help_text="Reason for bid rejection if applicable"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="When this bid automatically expires"
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "buyer",
                    models.ForeignKey(
                        help_text="User making the bid",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bids_made",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "bid",
                "verbose_name_plural": "bids",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FarmerProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "farm_size",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Farm size in acres",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.1)],
                    ),
                ),
                (
                    "location",
                    models.JSONField(
                        default=dict,
                        help_text="Location data as {lat: float, lng: float}",
                    ),
                ),
                (
                    "soil_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("clay", "Clay"),
                            ("sandy", "Sandy"),
                            ("loamy", "Loamy"),
                        ],
                        help_text="Primary soil type on the farm",
                        max_length=50,
                    ),
                ),
                (
                    "crops",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of crops grown (e.g., ['maize', 'coffee'])",
                    ),
                ),
                (
                    "irrigation_type",
                    models.CharField(
                        blank=True,
                        choices=[("rainfed", "Rainfed"), ("irrigated", "Irrigated")],
                        help_text="Primary irrigation method",
                        max_length=30,
                    ),
                ),
                (
                    "verification_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("VERIFIED", "Verified"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="PENDING",
                        help_text="Account verification status",
                        max_length=10,
                    ),
                ),
                (
                    "verification_documents",
                    models.JSONField(
                        blank=True, help_text="Encrypted document references", null=True
                    ),
                ),
                (
                    "credit_score",
                    models.FloatField(
                        blank=True,
                        help_text="Credit score from 0-1000",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="Associated user account",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="farmer_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "farmer profile",
                "verbose_name_plural": "farmer profiles",
            },
        ),
        migrations.CreateModel(
            name="LogisticsRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vehicle_type",
                    models.CharField(
                        choices=[
                            ("TRUCK", "Truck"),
                            ("PICKUP", "Pickup Truck"),
                            ("VAN", "Van"),
                            ("COLD_CHAIN", "Refrigerated Truck"),
                        ],
                        help_text="Type of vehicle required",
                        max_length=20,
                    ),
                ),
                (
                    "pickup_location",
                    models.JSONField(help_text="GeoJSON of pickup coordinates"),
                ),
                (
                    "dropoff_location",
                    models.JSONField(help_text="GeoJSON of delivery coordinates"),
                ),
                (
                    "scheduled_at",
                    models.DateTimeField(help_text="Planned pickup/delivery time"),
                ),
                (
                    "tracking_code",
                    models.CharField(
                        help_text="Unique shipment tracking code",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "driver",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned driver",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "logistics request",
                "verbose_name_plural": "logistics requests",
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("ESCROW", "Escrow Held"),
                            ("PAID", "Paid"),
                            ("FAILED", "Failed"),
                            ("REFUNDED", "Refunded"),
                        ],
                        default="PENDING",
                        help_text="Current payment status",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "bid",
                    models.OneToOneField(
                        help_text="Accepted bid that created this order",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="order",
                        to="agro_linker.bid",
                    ),
                ),
            ],
            options={
                "verbose_name": "order",
                "verbose_name_plural": "orders",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WeatherData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "location",
                    models.CharField(help_text="Location name", max_length=255),
                ),
                ("date", models.DateField(help_text="Date of the weather data")),
                (
                    "temperature",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Temperature in Celsius",
                        max_digits=5,
                    ),
                ),
                (
                    "humidity",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Humidity in percentage",
                        max_digits=5,
                    ),
                ),
                (
                    "precipitation",
                    models.DecimalField(
                        decimal_places=2, help_text="Precipitation in mm", max_digits=5
                    ),
                ),
                (
                    "wind_speed",
                    models.DecimalField(
                        decimal_places=2, help_text="Wind speed in km/h", max_digits=5
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TrackingStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PREPARING", "Preparing Shipment"),
                            ("IN_TRANSIT", "In Transit"),
                            ("DELAYED", "Delayed"),
                            ("DELIVERED", "Delivered"),
                            ("RETURNED", "Returned"),
                        ],
                        help_text="Current shipment status",
                        max_length=20,
                    ),
                ),
                (
                    "location",
                    models.JSONField(
                        blank=True, help_text="GeoJSON of current location", null=True
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional status details", null=True
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "logistics",
                    models.ForeignKey(
                        help_text="Related shipment",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tracking_updates",
                        to="agro_linker.logisticsrequest",
                    ),
                ),
            ],
            options={
                "verbose_name": "tracking status",
                "verbose_name_plural": "tracking statuses",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the product", max_length=255),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed product description"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("cereal", "Cereal"),
                            ("vegetable", "Vegetable"),
                            ("fruit", "Fruit"),
                        ],
                        help_text="Product category",
                        max_length=50,
                    ),
                ),
                (
                    "variety",
                    models.CharField(
                        blank=True,
                        help_text="Specific variety/cultivar",
                        max_length=100,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price per unit in local currency",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.01)],
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Available quantity",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.01)],
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        choices=[
                            ("kg", "Kilogram"),
                            ("g", "Gram"),
                            ("ton", "Metric Ton"),
                        ],
                        default="kg",
                        help_text="Unit of measurement",
                        max_length=10,
                    ),
                ),
                (
                    "quality_grade",
                    models.CharField(
                        blank=True,
                        choices=[("A", "Grade A"), ("B", "Grade B"), ("C", "Grade C")],
                        help_text="Official quality grade",
                        max_length=1,
                    ),
                ),
                (
                    "organic_certified",
                    models.BooleanField(
                        default=False,
                        help_text="Is this product organically certified?",
                    ),
                ),
                (
                    "harvest_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when product was harvested",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("ACTIVE", "Active"),
                            ("RESERVED", "Reserved"),
                            ("SOLD", "Sold"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="DRAFT",
                        help_text="Current listing status",
                        max_length=10,
                    ),
                ),
                (
                    "images",
                    models.JSONField(
                        blank=True, default=list, help_text="List of image URLs"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "farmer",
                    models.ForeignKey(
                        help_text="Farmer who listed this product",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="products",
                        to="agro_linker.farmerprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "product",
                "verbose_name_plural": "products",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(help_text="Quantity of the product"),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2, help_text="Price per unit", max_digits=10
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="agro_linker.order",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="order_items",
                        to="agro_linker.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("SMS", "SMS"),
                            ("WHATSAPP", "WhatsApp"),
                            ("EMAIL", "Email"),
                            ("PUSH", "Push Notification"),
                        ],
                        help_text="Delivery method",
                        max_length=10,
                    ),
                ),
                ("message", models.TextField(help_text="Notification content")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SENT", "Sent"),
                            ("FAILED", "Failed"),
                            ("READ", "Read"),
                        ],
                        default="PENDING",
                        help_text="Delivery status",
                        max_length=10,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, help_text="Additional context data", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Recipient user",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "notification",
                "verbose_name_plural": "notifications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="logisticsrequest",
            name="order",
            field=models.OneToOneField(
                help_text="Order being fulfilled",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="logistics",
                to="agro_linker.order",
            ),
        ),
        migrations.CreateModel(
            name="ChatRoom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "participants",
                    models.ManyToManyField(
                        help_text="Users involved in the chat",
                        related_name="chat_rooms",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "chat room",
                "verbose_name_plural": "chat rooms",
            },
        ),
        migrations.CreateModel(
            name="ChatMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField(help_text="Message content")),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "receiver",
                    models.ForeignKey(
                        help_text="User who received the message",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        help_text="User who sent the message",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "chat message",
                "verbose_name_plural": "chat messages",
                "ordering": ["timestamp"],
            },
        ),
        migrations.CreateModel(
            name="BuyerProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "company_name",
                    models.CharField(help_text="Official company name", max_length=100),
                ),
                (
                    "license_number",
                    models.CharField(
                        help_text="Business license number", max_length=50, unique=True
                    ),
                ),
                (
                    "preferred_crops",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of preferred crops (e.g., ['maize', 'beans'])",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="Associated user account",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="buyer_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "buyer profile",
                "verbose_name_plural": "buyer profiles",
            },
        ),
        migrations.AddField(
            model_name="bid",
            name="product",
            field=models.ForeignKey(
                help_text="Product being bid on",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bids",
                to="agro_linker.product",
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["status"], name="agro_linker_status_8ba013_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["category"], name="agro_linker_categor_8a82c0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["price"], name="agro_linker_price_b55384_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["farmer", "status"], name="agro_linker_farmer__9aad96_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["payment_status"], name="agro_linker_payment_0fa956_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bid",
            index=models.Index(
                fields=["status", "expires_at"], name="agro_linker_status_f1df9a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bid",
            index=models.Index(
                fields=["product", "status"], name="agro_linker_product_0fa7b3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bid",
            index=models.Index(
                fields=["buyer", "status"], name="agro_linker_buyer_i_56d2e2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["phone", "is_active"], name="agro_linker_phone_a58ba7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["role"], name="agro_linker_role_e8f529_idx"),
        ),
    ]
